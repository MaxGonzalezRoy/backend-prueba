<h1 class="text-3xl font-bold text-center my-6">🛒 Tu Carrito</h1>

{{#if cart.products.length}}
<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 p-4">
  {{#each cart.products}}
    <div class="bg-white shadow-md rounded-lg p-4 flex flex-col justify-between">
      <div>
        <h2 class="text-lg font-semibold text-blue-600 mb-2">Producto: {{this.name}}</h2>
        <p class="mb-1">Cantidad: <strong>{{this.quantity}}</strong></p>
        <small class="text-gray-500">ID: {{this.id}}</small>
      </div>
      <button 
        class="mt-4 bg-red-500 hover:bg-red-700 text-white py-1 px-3 rounded"
        onclick="removeFromCart('{{../cart.id}}', '{{this.id}}')"
      >
        Eliminar
      </button>
    </div>
  {{/each}}
</div>

<div class="text-center mt-6">
  <h3 class="text-xl font-bold">Total: ${{cart.totalPrice}}</h3>
</div>
{{else}}
  <div class="text-center mt-10 text-gray-600">
    <p class="text-lg">El carrito está vacío. ¡Agrega productos!</p>
  </div>
{{/if}}

<script>
  async function removeFromCart(cartId, productId) {
    const confirm = await Swal.fire({
      title: '¿Estás seguro?',
      text: 'Eliminarás este producto del carrito.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Sí, eliminar',
      cancelButtonText: 'Cancelar'
    });

    if (confirm.isConfirmed) {
      const res = await fetch(`/api/carts/${cartId}/product/${productId}`, {
        method: 'DELETE'
      });

      if (res.ok) {
        Swal.fire({
          title: 'Eliminado',
          text: 'Producto eliminado del carrito.',
          icon: 'success',
          timer: 1500,
          showConfirmButton: false
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire('Error', 'No se pudo eliminar el producto.', 'error');
      }
    }
  }

  // NO redeclarar socket si ya está en main.js
  socket.on('cartUpdated', () => location.reload());
</script>