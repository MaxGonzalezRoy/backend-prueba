<h1 class="text-2xl font-bold mb-4">ðŸŸ¢ Productos en Tiempo Real</h1>

<!-- Formulario de nuevo producto -->
<div class="bg-white shadow-md rounded p-6 mb-6">
    <h2 class="text-xl font-semibold mb-4">Agregar nuevo producto</h2>
    <form id="productForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input type="text" name="title" placeholder="TÃ­tulo" required class="border p-2 rounded">
        <input type="text" name="description" placeholder="DescripciÃ³n" required class="border p-2 rounded">
        <input type="text" name="code" placeholder="CÃ³digo" required class="border p-2 rounded">
        <input type="number" name="price" placeholder="Precio" required class="border p-2 rounded">
        <input type="number" name="stock" placeholder="Stock" required class="border p-2 rounded">
        <input type="text" name="category" placeholder="CategorÃ­a" required class="border p-2 rounded">
        <input type="text" name="thumbnails" placeholder="Thumbnails (coma separadas)" class="border p-2 rounded col-span-1 md:col-span-2">
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded col-span-1 md:col-span-2">Agregar Producto</button>
    </form>
</div>

<!-- Lista de productos -->
<div class="bg-white shadow-md rounded p-6">
    <h2 class="text-xl font-semibold mb-4">Lista de productos</h2>
    <ul id="productList" class="space-y-2">
        {{#each products}}
        <li class="border p-4 rounded shadow-sm">
            <strong>{{title}}</strong> - ${{price}} (Stock: {{stock}})
        </li>
        {{/each}}
    </ul>
</div>

<script>
    const socket = io();
    const form = document.getElementById('productForm');
    const productList = document.getElementById('productList');

    form.addEventListener('submit', async e => {
        e.preventDefault();
        const formData = new FormData(form);
        const data = {};

        formData.forEach((value, key) => {
            if (key === 'thumbnails') {
                data[key] = value.split(',').map(str => str.trim());
            } else if (key === 'price' || key === 'stock') {
                data[key] = parseFloat(value);
            } else {
                data[key] = value;
            }
        });

        const res = await fetch('/api/products', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        form.reset();

        const result = await res.json();
        if (res.ok) {
            Swal.fire('Â¡Producto agregado!', '', 'success');
        } else {
            Swal.fire('Error', result.error || 'No se pudo agregar el producto', 'error');
        }
    });

    socket.on('productListUpdated', (products) => {
        productList.innerHTML = '';
        products.forEach(p => {
            const li = document.createElement('li');
            li.className = 'border p-4 rounded shadow-sm';
            li.innerHTML = `<strong>${p.title}</strong> - $${p.price} (Stock: ${p.stock})`;
            productList.appendChild(li);
        });
    });
</script>