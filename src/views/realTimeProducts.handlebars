<h1 class="text-3xl font-bold mb-6 text-green-600">ðŸŸ¢ Productos en Tiempo Real</h1>

<section class="mb-8">
    <h2 class="text-xl font-semibold mb-4">âž• Agregar nuevo producto</h2>
    <form id="productForm" class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <input class="border p-2 rounded" type="text" name="title" placeholder="TÃ­tulo" required>
        <input class="border p-2 rounded" type="text" name="description" placeholder="DescripciÃ³n" required>
        <input class="border p-2 rounded" type="text" name="code" placeholder="CÃ³digo" required>
        <input class="border p-2 rounded" type="number" name="price" placeholder="Precio" required>
        <input class="border p-2 rounded" type="number" name="stock" placeholder="Stock" required>
        <input class="border p-2 rounded" type="text" name="category" placeholder="CategorÃ­a" required>
        <input class="border p-2 rounded col-span-full" type="text" name="thumbnails" placeholder="Thumbnails (coma separadas)">
        <button class="col-span-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700" type="submit">
            Agregar Producto
        </button>
    </form>
</section>

<section>
    <h2 class="text-xl font-semibold mb-4">ðŸ“¦ Lista de productos</h2>
    <ul id="productList" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
        {{#each products}}
        <li class="border p-4 rounded shadow bg-white">
            <h3 class="text-lg font-bold text-blue-600">{{title}}</h3>
            <p class="text-gray-700">DescripciÃ³n: {{description}}</p>
            <p class="text-green-700 font-semibold">$ {{price}}</p>
            <p class="text-sm text-gray-500">Stock: {{stock}}</p>
        </li>
        {{/each}}
    </ul>
</section>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    const form = document.getElementById('productForm');
    const productList = document.getElementById('productList');

    form.addEventListener('submit', async e => {
        e.preventDefault();

        const formData = new FormData(form);
        const data = {};
        formData.forEach((value, key) => {
            if (key === 'thumbnails') {
                data[key] = value.split(',').map(str => str.trim());
            } else if (key === 'price' || key === 'stock') {
                data[key] = parseFloat(value);
            } else {
                data[key] = value;
            }
    });

    const res = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    });

    if (res.ok) {
        form.reset();
    } else {
        const error = await res.json();
        alert(error.message || 'Error al agregar el producto.');
    }
    });

    socket.on('productListUpdated', (products) => {
        productList.innerHTML = '';
        products.forEach(p => {
            const li = document.createElement('li');
            li.className = 'border p-4 rounded shadow bg-white';
            li.innerHTML = `
                <h3 class="text-lg font-bold text-blue-600">${p.title}</h3>
                <p class="text-gray-700">DescripciÃ³n: ${p.description}</p>
                <p class="text-green-700 font-semibold">$ ${p.price}</p>
                <p class="text-sm text-gray-500">Stock: ${p.stock}</p>
        `;
        productList.appendChild(li);
    });
    });
</script>
