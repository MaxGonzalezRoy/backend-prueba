<section class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-5">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-boxes me-2"></i>Nuestros Productos
        </h1>
        <div class="d-flex">
            <div class="dropdown me-3">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown">
                    <i class="fas fa-filter me-1"></i> Filtrar
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="/products">Todos</a></li>
                    {{#each categories}}
                    <li><a class="dropdown-item" href="/products?category={{this}}">{{this}}</a></li>
                    {{/each}}
                </ul>
            </div>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown">
                    <i class="fas fa-sort me-1"></i> Ordenar
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="/products?sort=price_asc">Precio: Menor a Mayor</a></li>
                    <li><a class="dropdown-item" href="/products?sort=price_desc">Precio: Mayor a Menor</a></li>
                    <li><a class="dropdown-item" href="/products?sort=name_asc">Nombre: A-Z</a></li>
                    <li><a class="dropdown-item" href="/products?sort=name_desc">Nombre: Z-A</a></li>
                </ul>
            </div>
        </div>
    </div>

    {{#if products.length}}
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        {{#each products}}
        <div class="col">
            <div class="card h-100 product-card">
                {{#if this.thumbnails.length}}
                <img src="{{this.thumbnails.[0]}}" class="card-img-top product-image" alt="{{this.title}}">
                {{else}}
                <div class="no-image-placeholder">
                    <i class="fas fa-box-open fa-4x"></i>
                </div>
                {{/if}}
                <div class="card-body">
                    <h5 class="card-title">{{this.title}}</h5>
                    <p class="card-text text-muted">{{truncate this.description 100}}</p>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="badge bg-primary">{{this.category}}</span>
                        <span class="text-success fw-bold">${{formatPrice this.price}}</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="text-muted small">
                            <i class="fas fa-cubes me-1"></i> Stock: {{this.stock}}
                        </span>
                        <button class="btn btn-sm btn-outline-primary" onclick="showProductDetails('{{this._id}}')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                <div class="card-footer bg-transparent">
                    <button class="btn btn-primary w-100 add-to-cart" 
                            data-id="{{this._id}}"
                            {{#if (lt this.stock 1)}}disabled{{/if}}>
                        <i class="fas fa-cart-plus me-1"></i>
                        {{#if (lt this.stock 1)}}Sin Stock{{else}}Agregar al Carrito{{/if}}
                    </button>
                </div>
            </div>
        </div>
        {{/each}}
    </div>

    <nav class="mt-5">
        <ul class="pagination justify-content-center">
            {{#if pagination.hasPrevPage}}
            <li class="page-item">
                <a class="page-link" href="{{pagination.prevLink}}">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
            {{/if}}
            
            {{#each pagination.pages}}
            <li class="page-item {{#if this.active}}active{{/if}}">
                <a class="page-link" href="{{this.link}}">{{this.number}}</a>
            </li>
            {{/each}}
            
            {{#if pagination.hasNextPage}}
            <li class="page-item">
                <a class="page-link" href="{{pagination.nextLink}}">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
            {{/if}}
        </ul>
    </nav>
    {{else}}
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="fas fa-box-open fa-5x text-muted"></i>
        </div>
        <h3 class="text-muted mb-3">No hay productos disponibles</h3>
        <p class="text-muted">Prueba con otros filtros o vuelve más tarde</p>
        <a href="/products" class="btn btn-primary">
            <i class="fas fa-sync-alt me-1"></i> Reiniciar filtros
        </a>
    </div>
    {{/if}}
</section>

<!-- Modal para detalles del producto -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="productModalBody">
                <!-- Contenido dinámico -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="modalAddToCart">Agregar al Carrito</button>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Configuración inicial
    document.addEventListener('DOMContentLoaded', () => {
        // Eventos para botones de agregar al carrito
        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productId = e.target.dataset.id || e.target.closest('.add-to-cart').dataset.id;
                await addToCart(productId);
            });
        });
    });

    // Función para mostrar detalles del producto
    async function showProductDetails(productId) {
        try {
            const response = await fetch(`/api/products/${productId}`);
            if (!response.ok) throw new Error('Producto no encontrado');
            
            const product = await response.json();
            const modal = new bootstrap.Modal(document.getElementById('productModal'));
            
            // Llenar modal con datos del producto
            document.getElementById('productModalTitle').textContent = product.title;
            
            const modalBody = document.getElementById('productModalBody');
            modalBody.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <img src="${product.thumbnails[0] || '/images/no-image.jpg'}" 
                             class="img-fluid rounded mb-3" alt="${product.title}">
                        <div class="d-flex flex-wrap gap-2">
                            ${product.thumbnails.map(img => `
                                <img src="${img}" class="img-thumbnail" style="width: 80px; height: 80px; object-fit: cover;">
                            `).join('')}
                        </div>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Descripción:</strong> ${product.description}</p>
                        <p><strong>Categoría:</strong> <span class="badge bg-primary">${product.category}</span></p>
                        <p><strong>Precio:</strong> $${product.price.toFixed(2)}</p>
                        <p><strong>Stock:</strong> ${product.stock} unidades</p>
                        <p><strong>Código:</strong> <code>${product.code}</code></p>
                        ${product.status ? '' : '<div class="alert alert-warning">Producto no disponible</div>'}
                    </div>
                </div>
            `;
            
            // Configurar botón de agregar al carrito
            const addButton = document.getElementById('modalAddToCart');
            addButton.dataset.id = productId;
            addButton.disabled = product.stock <= 0;
            addButton.innerHTML = product.stock <= 0 
                ? '<i class="fas fa-ban me-1"></i> Sin Stock' 
                : '<i class="fas fa-cart-plus me-1"></i> Agregar al Carrito';
            
            addButton.onclick = async () => {
                await addToCart(productId);
                modal.hide();
            };
            
            modal.show();
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message
            });
        }
    }

    // Función para agregar al carrito
    async function addToCart(productId) {
        try {
            const cartId = localStorage.getItem('cartId') || 'default-cart';
            const toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
            
            toast.fire({
                icon: 'info',
                title: 'Agregando al carrito...'
            });
            
            const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ quantity: 1 })
            });
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Error al agregar al carrito');
            }
            
            const result = await response.json();
            
            // Actualizar contador en navbar
            updateCartCounter(result.products.reduce((sum, item) => sum + item.quantity, 0));
            
            toast.fire({
                icon: 'success',
                title: '¡Agregado al carrito!'
            });
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message
            });
        }
    }

    // Función para actualizar contador del carrito
    function updateCartCounter(count) {
        const counter = document.getElementById('cartCounter');
        if (counter) {
            counter.textContent = count;
            counter.style.display = count > 0 ? 'inline-block' : 'none';
        }
    }
</script>

<style>
    .product-card {
        transition: transform 0.2s, box-shadow 0.2s;
        border-radius: 10px;
        overflow: hidden;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .product-image {
        height: 200px;
        object-fit: cover;
    }
    
    .no-image-placeholder {
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        color: #6c757d;
    }
    
    .add-to-cart:disabled {
        cursor: not-allowed;
    }
</style>