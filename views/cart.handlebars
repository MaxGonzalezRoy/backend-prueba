<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-shopping-cart me-2"></i>Tu Carrito
        </h1>
        <a href="/products" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-1"></i> Seguir Comprando
        </a>
    </div>

    {{#if cart.products.length}}
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th scope="col" style="width: 40%">Producto</th>
                    <th scope="col" class="text-center">Cantidad</th>
                    <th scope="col" class="text-end">Precio Unitario</th>
                    <th scope="col" class="text-end">Subtotal</th>
                    <th scope="col" class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                {{#each cart.products}}
                <tr id="product-{{this.product._id}}">
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="{{this.product.thumbnails.[0]}}" alt="{{this.product.title}}" 
                                 class="img-thumbnail me-3" style="width: 80px; height: 80px; object-fit: cover;">
                            <div>
                                <h5 class="mb-1">{{this.product.title}}</h5>
                                <small class="text-muted">{{this.product.description}}</small>
                            </div>
                        </div>
                    </td>
                    <td class="text-center">
                        <div class="d-flex justify-content-center align-items-center">
                            <button class="btn btn-sm btn-outline-secondary" 
                                    onclick="updateQuantity('{{this.product._id}}', {{subtract this.quantity 1}})">
                                <i class="fas fa-minus"></i>
                            </button>
                            <span class="mx-2" style="min-width: 30px; display: inline-block;">{{this.quantity}}</span>
                            <button class="btn btn-sm btn-outline-secondary" 
                                    onclick="updateQuantity('{{this.product._id}}', {{add this.quantity 1}})">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </td>
                    <td class="text-end">${{formatPrice this.product.price}}</td>
                    <td class="text-end fw-bold">${{formatPrice (multiply this.quantity this.product.price)}}</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-danger" 
                                onclick="removeProduct('{{this.product._id}}')">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
                {{/each}}
            </tbody>
            <tfoot class="table-group-divider">
                <tr>
                    <td colspan="3" class="text-end fw-bold">TOTAL:</td>
                    <td class="text-end fw-bold h5">${{formatPrice (calcTotal cart.products)}}</td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="d-flex justify-content-between mt-4">
        <button class="btn btn-outline-danger" onclick="clearCart()">
            <i class="fas fa-trash me-1"></i> Vaciar Carrito
        </button>
        <button class="btn btn-success btn-lg" onclick="checkout()">
            <i class="fas fa-credit-card me-1"></i> Proceder al Pago
        </button>
    </div>
    {{else}}
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="fas fa-shopping-cart fa-5x text-muted"></i>
        </div>
        <h3 class="text-muted mb-3">Tu carrito está vacío</h3>
        <p class="text-muted mb-4">Agrega productos para comenzar a comprar</p>
        <a href="/products" class="btn btn-primary btn-lg">
            <i class="fas fa-store me-1"></i> Ver Productos
        </a>
    </div>
    {{/if}}
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Función para actualizar cantidad
    async function updateQuantity(productId, newQuantity) {
        try {
            if (newQuantity <= 0) {
                return removeProduct(productId);
            }

            const response = await fetch(`/api/carts/{{cart._id}}/product/${productId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ quantity: newQuantity })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message);
            }

            const result = await Swal.fire({
                icon: 'success',
                title: 'Cantidad actualizada',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 1500
            });

            if (result.dismiss === Swal.DismissReason.timer) {
                location.reload();
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'No se pudo actualizar la cantidad'
            });
        }
    }

    // Función para eliminar producto
    async function removeProduct(productId) {
        const { isConfirmed } = await Swal.fire({
            title: '¿Eliminar producto?',
            text: 'Esta acción no se puede deshacer',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
        });

        if (isConfirmed) {
            try {
                const response = await fetch(`/api/carts/{{cart._id}}/product/${productId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message);
                }

                const row = document.getElementById(`product-${productId}`);
                if (row) {
                    row.classList.add('animate__animated', 'animate__fadeOut');
                    setTimeout(() => row.remove(), 500);
                }

                await Swal.fire({
                    icon: 'success',
                    title: 'Producto eliminado',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 1500
                });

                // Recargar si fue el último producto
                if (document.querySelectorAll('tbody tr').length === 1) {
                    location.reload();
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'No se pudo eliminar el producto'
                });
            }
        }
    }

    // Función para vaciar carrito
    async function clearCart() {
        const { isConfirmed } = await Swal.fire({
            title: '¿Vaciar carrito?',
            text: 'Se eliminarán todos los productos',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            confirmButtonText: 'Sí, vaciar',
            cancelButtonText: 'Cancelar'
        });

        if (isConfirmed) {
            try {
                const response = await fetch(`/api/carts/{{cart._id}}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message);
                }

                await Swal.fire({
                    icon: 'success',
                    title: 'Carrito vaciado',
                    showConfirmButton: false,
                    timer: 1500
                });

                location.reload();
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'No se pudo vaciar el carrito'
                });
            }
        }
    }

    // Función para checkout
    function checkout() {
        Swal.fire({
            title: 'Proceder al pago',
            text: 'Serás redirigido a la pasarela de pago',
            icon: 'info',
            showCancelButton: true,
            confirmButtonText: 'Continuar',
            cancelButtonText: 'Seguir comprando'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/checkout';
            }
        });
    }
</script>