<section class="container py-5">
    <div class="row">
        <!-- Formulario de Productos -->
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="h5 mb-0">
                        <i class="fas fa-{{#if idInput.value}}edit{{else}}plus{{/if}} me-1"></i>
                        {{#if idInput.value}}Editar{{else}}Agregar{{/if}} Producto
                    </h3>
                </div>
                <div class="card-body">
                    <form id="product-form" class="needs-validation" novalidate>
                        <input type="hidden" id="product-id">
                        
                        <div class="mb-3">
                            <label for="title" class="form-label">Título</label>
                            <input type="text" class="form-control" id="title" required>
                            <div class="invalid-feedback">Por favor ingresa un título</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Descripción</label>
                            <textarea class="form-control" id="description" rows="2" required></textarea>
                            <div class="invalid-feedback">Por favor ingresa una descripción</div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="code" class="form-label">Código</label>
                                <input type="text" class="form-control" id="code" required>
                                <div class="invalid-feedback">Código requerido</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="category" class="form-label">Categoría</label>
                                <input type="text" class="form-control" id="category" required>
                                <div class="invalid-feedback">Categoría requerida</div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="price" class="form-label">Precio</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="price" min="0" step="0.01" required>
                                </div>
                                <div class="invalid-feedback">Precio inválido</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <input type="number" class="form-control" id="stock" min="0" required>
                                <div class="invalid-feedback">Stock inválido</div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Guardar
                            </button>
                            <button type="button" id="btn-cancel" class="btn btn-outline-secondary d-none">
                                <i class="fas fa-times me-1"></i> Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Lista de Productos -->
        <div class="col-lg-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="h4 mb-0">
                    <i class="fas fa-boxes me-2"></i>Lista de Productos
                </h2>
                <div class="badge bg-primary rounded-pill">{{products.length}} productos</div>
            </div>

            {{#if products.length}}
                <div class="row row-cols-1 row-cols-md-2 g-4" id="product-list">
                    {{#each products}}
                        <div class="col">
                            <div class="card h-100 product-card" data-id="{{this.id}}">
                                <div class="card-body">
                                    <h5 class="card-title">{{this.title}}</h5>
                                    <p class="card-text text-muted">{{this.description}}</p>
                                    <ul class="list-group list-group-flush mb-3">
                                        <li class="list-group-item d-flex justify-content-between">
                                            <span>Código:</span>
                                            <span class="fw-bold">{{this.code}}</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between">
                                            <span>Precio:</span>
                                            <span class="text-success fw-bold">${{this.price}}</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between">
                                            <span>Stock:</span>
                                            <span class="fw-bold">{{this.stock}} unidades</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between">
                                            <span>Categoría:</span>
                                            <span class="badge bg-primary">{{this.category}}</span>
                                        </li>
                                    </ul>
                                </div>
                                <div class="card-footer bg-transparent border-top-0">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-sm btn-outline-danger btn-delete">
                                            <i class="fas fa-trash-alt me-1"></i> Eliminar
                                        </button>
                                        <button class="btn btn-sm btn-outline-warning btn-edit">
                                            <i class="fas fa-edit me-1"></i> Editar
                                        </button>
                                        <button class="btn btn-sm btn-success btn-add-cart" 
                                                {{#if (lt this.stock 1)}}disabled{{/if}}>
                                            <i class="fas fa-cart-plus me-1"></i> 
                                            {{#if (lt this.stock 1)}}Sin Stock{{else}}Agregar{{/if}}
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {{/each}}
                </div>
            {{else}}
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    No hay productos disponibles en este momento.
                </div>
            {{/if}}
        </div>
    </div>
</section>

<!-- Modal para agregar al carrito -->
<div class="modal fade" id="addToCartModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar al carrito</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="quantity" class="form-label">Cantidad:</label>
                    <input type="number" class="form-control" id="quantity" min="1" value="1">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmAddToCart">Agregar</button>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Variables globales
    const socket = io();
    const addToCartModal = new bootstrap.Modal('#addToCartModal');
    let currentProductId = null;
    let currentCartId = localStorage.getItem('cartId') || '1'; // Mejorar con creación dinámica de carrito

    // Inicialización
    document.addEventListener('DOMContentLoaded', () => {
        initFormValidation();
        setupEventListeners();
    });

    // Validación de formulario
    function initFormValidation() {
        const form = document.getElementById('product-form');
        
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            if (form.checkValidity()) {
                handleFormSubmit();
            }
            
            form.classList.add('was-validated');
        });
    }

    // Manejador de envío de formulario
    function handleFormSubmit() {
        const form = document.getElementById('product-form');
        const idInput = document.getElementById('product-id');
        
        const product = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            code: document.getElementById('code').value,
            price: parseFloat(document.getElementById('price').value),
            stock: parseInt(document.getElementById('stock').value),
            category: document.getElementById('category').value
        };

        if (idInput.value) {
            product.id = idInput.value;
            socket.emit('update-product', product);
        } else {
            socket.emit('new-product', product);
        }

        resetForm();
    }

    // Configurar event listeners
    function setupEventListeners() {
        // Botón cancelar edición
        document.getElementById('btn-cancel').addEventListener('click', resetForm);
        
        // Delegación de eventos para la lista de productos
        document.getElementById('product-list')?.addEventListener('click', (e) => {
            const card = e.target.closest('.product-card');
            if (!card) return;
            
            const productId = card.dataset.id;
            
            if (e.target.closest('.btn-delete')) {
                deleteProduct(productId);
            }
            
            if (e.target.closest('.btn-edit')) {
                editProduct(card);
            }
            
            if (e.target.closest('.btn-add-cart')) {
                openAddToCartModal(productId);
            }
        });
        
        // Confirmar agregar al carrito
        document.getElementById('confirmAddToCart').addEventListener('click', () => {
            const quantity = parseInt(document.getElementById('quantity').value) || 1;
            addToCart(currentProductId, quantity);
            addToCartModal.hide();
        });
    }

    // Editar producto
    function editProduct(card) {
        const idInput = document.getElementById('product-id');
        const cancelBtn = document.getElementById('btn-cancel');
        
        idInput.value = card.dataset.id;
        document.getElementById('title').value = card.querySelector('.card-title').textContent;
        document.getElementById('description').value = card.querySelector('.card-text').textContent;
        document.getElementById('code').value = card.querySelector('.list-group-item:nth-child(1) .fw-bold').textContent;
        document.getElementById('price').value = card.querySelector('.list-group-item:nth-child(2) .fw-bold').textContent.replace('$', '');
        document.getElementById('stock').value = card.querySelector('.list-group-item:nth-child(3) .fw-bold').textContent.split(' ')[0];
        document.getElementById('category').value = card.querySelector('.list-group-item:nth-child(4) .badge').textContent;
        
        cancelBtn.classList.remove('d-none');
        document.getElementById('title').focus();
    }

    // Eliminar producto
    function deleteProduct(productId) {
        Swal.fire({
            title: '¿Eliminar producto?',
            text: 'Esta acción no se puede deshacer',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                socket.emit('delete-product', productId);
            }
        });
    }

    // Abrir modal para agregar al carrito
    function openAddToCartModal(productId) {
        currentProductId = productId;
        document.getElementById('quantity').value = 1;
        addToCartModal.show();
    }

    // Agregar al carrito
    async function addToCart(productId, quantity) {
        try {
            const response = await fetch(`/api/carts/${currentCartId}/product/${productId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ quantity })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Error al agregar al carrito');
            }

            await Swal.fire({
                icon: 'success',
                title: '¡Agregado al carrito!',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000
            });
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message
            });
        }
    }

    // Resetear formulario
    function resetForm() {
        const form = document.getElementById('product-form');
        form.reset();
        form.classList.remove('was-validated');
        document.getElementById('product-id').value = '';
        document.getElementById('btn-cancel').classList.add('d-none');
    }

    // Manejo de eventos de socket
    socket.on('products', (products) => {
        // Tu lógica para actualizar la lista de productos
    });

    socket.on('toast', (msg) => {
        Swal.fire({
            toast: true,
            position: 'top-end',
            title: msg,
            icon: 'success',
            showConfirmButton: false,
            timer: 3000
        });
    });

    socket.on('error', (msg) => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: msg
        });
    });
</script>

<style>
    .product-card {
        transition: transform 0.2s;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .btn-add-cart:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }
</style>